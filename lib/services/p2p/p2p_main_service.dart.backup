import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:wifi_iot/wifi_iot.dart';
import '../../models/message_model.dart';
import '../../services/database_service.dart';
import 'p2p_base_service.dart';
import 'p2p_network_service.dart';
import 'p2p_discovery_service.dart';

/// Main P2P service that orchestrates all P2P operations
class P2PMainService extends P2PBaseService {
  // Service components
  late P2PNetworkService _networkService;
  late P2PDiscoveryService _discoveryService;

  // Platform channel for hotspot operations
  static const MethodChannel _hotspotChannel = MethodChannel(
    'resqlink/hotspot',
  );

  // Enhanced state
  bool _hotspotCreationInProgress = false;
  String? _actualCreatedSSID;
  Timer? _hotspotVerificationTimer;

  // Message tracing for debugging
  final List<String> _messageTrace = [];

  @override
  Future<bool> initialize(String userName, {String? preferredRole}) async {
    debugPrint('üöÄ P2P Main Service initializing with userName: $userName');

    try {
      // Initialize base service first
      final baseSuccess = await super.initialize(
        userName,
        preferredRole: preferredRole,
      );
      if (!baseSuccess) {
        debugPrint('‚ùå Base service initialization failed');
        return false;
      }

      // Initialize service components
      _networkService = P2PNetworkService(this);
      _discoveryService = P2PDiscoveryService(this, _networkService);

      await _discoveryService.initialize();

      _addMessageTrace('Main service initialized with userName: $userName');
      debugPrint('‚úÖ P2P Main Service initialized successfully');

      // Setup enhanced monitoring
      _setupEnhancedMonitoring();

      return true;
    } catch (e) {
      debugPrint('‚ùå P2P Main Service initialization failed: $e');
      _addMessageTrace('Service initialization failed: $e');
      return false;
    }
  }

  /// Setup enhanced monitoring and verification
  void _setupEnhancedMonitoring() {
    // Monitor hotspot status every 30 seconds
    _hotspotVerificationTimer = Timer.periodic(Duration(seconds: 30), (_) {
      _verifyHotspotStatus();
    });
  }

  @override
  Future<bool> createEmergencyHotspot({String? deviceId}) async {
    if (_hotspotCreationInProgress) {
      debugPrint('‚è≥ Hotspot creation already in progress...');
      return false;
    }

    _hotspotCreationInProgress = true;
    _addMessageTrace('Starting emergency hotspot creation');

    try {
      debugPrint('üîß Creating emergency hotspot...');

      // 1. Check permissions
      if (!await checkAndRequestPermissions()) {
        debugPrint('‚ùå Required permissions not granted');
        _addMessageTrace('Hotspot permissions denied');
        return false;
      }

      // 2. Generate unique SSID
      final hotspotSSID =
          "$resqlinkPrefix${deviceId ?? DateTime.now().millisecondsSinceEpoch}";
      debugPrint('üîß Creating hotspot with SSID: $hotspotSSID');
      _addMessageTrace('Creating hotspot: $hotspotSSID');

      // 3. Enable WiFi first
      await _ensureWiFiEnabled();

      // 4. Try multiple hotspot creation methods
      bool success = false;

      // Method 1: Try native Android implementation
      success = await _createNativeHotspot(hotspotSSID);
      if (success) {
        debugPrint('‚úÖ Native hotspot created');
        _addMessageTrace('Native hotspot created successfully');
      }

      // Method 2: Try WiFiForIoTPlugin (if Method 1 failed)
      if (!success) {
        success = await _createPluginHotspot(hotspotSSID);
        if (success) {
          debugPrint('‚úÖ Plugin hotspot created');
          _addMessageTrace('Plugin hotspot created successfully');
        }
      }

      // Method 3: Manual setup guidance (if all else fails)
      if (!success) {
        success = await _createManualHotspot(hotspotSSID);
        if (success) {
          debugPrint('‚úÖ Manual hotspot setup initiated');
          _addMessageTrace('Manual hotspot setup completed');
        }
      }

      if (success) {
        _actualCreatedSSID = hotspotSSID;

        // Setup network services
        await _networkService.setupHotspotServices();

        // Start discovery after hotspot is ready
        Timer(Duration(seconds: 5), () {
          discoverDevices(force: true);
        });

        // Verify hotspot is working
        await Future.delayed(Duration(seconds: 3));
        final verified = await _verifyHotspotWorking();
        if (!verified) {
          debugPrint('‚ö†Ô∏è Hotspot created but not accessible');
          _addMessageTrace('Hotspot created but verification failed');
        }

        updateConnectionStatus(true);
        return true;
      } else {
        debugPrint('‚ùå All hotspot creation methods failed');
        _addMessageTrace('All hotspot creation methods failed');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Exception in createEmergencyHotspot: $e');
      _addMessageTrace('Exception in hotspot creation: $e');
      return false;
    } finally {
      _hotspotCreationInProgress = false;
    }
  }

  /// Ensure WiFi is enabled
  Future<void> _ensureWiFiEnabled() async {
    try {
      await WiFiForIoTPlugin.setEnabled(true);
      await Future.delayed(Duration(seconds: 2)); // Wait for WiFi to stabilize
      debugPrint('‚úÖ WiFi enabled');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Failed to enable WiFi: $e');
    }
  }

  /// Create hotspot using native Android methods
  Future<bool> _createNativeHotspot(String ssid) async {
    try {
      debugPrint('üîß Attempting native Android hotspot creation...');

      final result = await _hotspotChannel.invokeMethod('createHotspot', {
        'ssid': ssid,
        'password': emergencyPassword,
        'force': true,
      });

      if (result['success'] == true) {
        debugPrint('‚úÖ Native hotspot created successfully');
        return true;
      } else {
        debugPrint('‚ùå Native hotspot creation failed: ${result['error']}');
        return false;
      }
    } on PlatformException catch (e) {
      debugPrint('‚ùå Platform exception in native hotspot: $e');
      return false;
    } catch (e) {
      debugPrint('‚ùå Native hotspot creation exception: $e');
      return false;
    }
  }

  /// Create hotspot using WiFiForIoTPlugin
  Future<bool> _createPluginHotspot(String ssid) async {
    try {
      debugPrint('üîß Attempting plugin hotspot creation...');

      final result = await WiFiForIoTPlugin.setWifiAPEnabled(
        ssid,
        emergencyPassword,
        true,
      );

      if (result) {
        debugPrint('‚úÖ Plugin hotspot enabled successfully');
        return true;
      } else {
        debugPrint('‚ùå Plugin hotspot creation failed');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Plugin hotspot creation exception: $e');
      return false;
    }
  }

  Future<bool> connectToDevice(Map<String, dynamic> device) async {
    try {
      debugPrint('üîó Attempting to connect to device: ${device['deviceName']}');

      final connectionType = device['connectionType'] as String?;

      switch (connectionType) {
        case 'wifi_direct':
          return await _connectViaWifiDirect(device);
        case 'hotspot':
        case 'hotspot_enhanced':
          return await _connectViaHotspot(device);
        case 'mdns':
        case 'mdns_enhanced':
          return await _connectViaMDNS(device);
        default:
          debugPrint('‚ö†Ô∏è Unknown connection type: $connectionType');
          return false;
      }
    } catch (e) {
      debugPrint('‚ùå Device connection failed: $e');
      return false;
    }
  }

  Future<bool> _connectViaWifiDirect(Map<String, dynamic> device) async {
    // Implementation for WiFi Direct connection
    final deviceAddress = device['deviceAddress'] as String?;
    if (deviceAddress == null) return false;

    try {
      // Add WiFi Direct connection logic here
      debugPrint('üì° Connecting via WiFi Direct to: $deviceAddress');
      return true; // Placeholder
    } catch (e) {
      debugPrint('‚ùå WiFi Direct connection failed: $e');
      return false;
    }
  }

  Future<bool> _connectViaHotspot(Map<String, dynamic> device) async {
    final ssid = device['deviceName'] as String?;
    if (ssid == null) return false;

    return await _networkService.connectToResQLinkNetwork(
      WiFiAccessPoint(
        ssid: ssid,
        bssid: '',
        capabilities: '',
        frequency: 0,
        level: 0,
      ),
    );
  }

  Future<bool> _connectViaMDNS(Map<String, dynamic> device) async {
    // Implementation for mDNS connection
    debugPrint('üì° Connecting via mDNS to: ${device['deviceName']}');
    return true; // Placeholder
  }

  /// Force device to host role
  Future<void> forceHostRole() async {
    try {
      debugPrint('üëë Forcing host role...');
      setRole(P2PRole.host);
      await createEmergencyHotspot();
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Failed to force host role: $e');
    }
  }

  /// Force device to client role
  Future<void> forceClientRole() async {
    try {
      debugPrint('üì± Forcing client role...');
      setRole(P2PRole.client);
      await discoverDevices(force: true);
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Failed to force client role: $e');
    }
  }

  /// Clear forced role
  Future<void> clearForcedRole() async {
    try {
      debugPrint('üîÑ Clearing forced role...');
      setRole(P2PRole.none);
      await discoverDevices(force: true);
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Failed to clear forced role: $e');
    }
  }

  /// Send emergency template message
  Future<void> sendEmergencyTemplate(EmergencyTemplate template) async {
    String message;
    switch (template) {
      case EmergencyTemplate.sos:
        message = 'üÜò SOS - Emergency assistance needed!';
      case EmergencyTemplate.trapped:
        message = 'üöß TRAPPED - Cannot move from current location!';
      case EmergencyTemplate.medical:
        message = 'üè• MEDICAL EMERGENCY - Immediate medical attention needed!';
      case EmergencyTemplate.safe:
        message = '‚úÖ SAFE - I am safe and secure';
      case EmergencyTemplate.evacuating:
        message = 'üèÉ EVACUATING - Moving to safer location';
    }

    await sendMessage(
      message: message,
      type: MessageType.emergency,
      senderName: userName ?? 'Emergency User',
    );
  }

  /// Set device role
  void setRole(P2PRole role) {
    if (_currentRole != role) {
      _currentRole = role;
      debugPrint('üé≠ Role changed to: ${role.name}');
      notifyListeners();
    }
  }

  /// Disconnect from all connections
  Future<void> disconnect() async {
    try {
      debugPrint('üîå Disconnecting from all connections...');

      // Stop network services
      await _networkService.dispose();

      // Clear connected devices
      connectedDevices.clear();

      // Update connection status
      updateConnectionStatus(false);

      debugPrint('‚úÖ Disconnected successfully');
    } catch (e) {
      debugPrint('‚ùå Disconnect failed: $e');
    }
  }

  /// Get connection information
  Map<String, dynamic> getConnectionInfo() {
    return {
      'deviceId': deviceId,
      'userName': userName,
      'role': currentRole.name,
      'isConnected': isConnected,
      'emergencyMode': emergencyMode,
      'connectedDevices': connectedDevices.length,
      'discoveredDevices': discoveredResQLinkDevices.length,
      'actualCreatedSSID': _actualCreatedSSID,
      'hotspotCreationInProgress': _hotspotCreationInProgress,
    };
  }

  /// Get enhanced connection info
  Map<String, dynamic> getEnhancedConnectionInfo() {
    final networkStatus = _networkService.getNetworkStatus();
    final discoveryStatus = _discoveryService.getDiscoveryStatus();

    return {
      ...getConnectionInfo(),
      'networkStatus': networkStatus,
      'discoveryStatus': discoveryStatus,
      'messageTrace': getMessageTrace(),
      'detailedStatus': getDetailedStatus(),
    };
  }

  /// Create hotspot with manual user guidance
  Future<bool> _createManualHotspot(String ssid) async {
    try {
      debugPrint('üîß Initiating manual hotspot setup...');

      // Show instructions to user (in a real app, this would be a dialog)
      _showHotspotInstructions(ssid);

      // Wait for user to set up hotspot
      debugPrint('‚è≥ Waiting for manual hotspot creation...');
      await Future.delayed(Duration(seconds: 15));

      // In emergency mode, assume success even if we can't verify
      debugPrint('‚úÖ Manual hotspot setup assumed complete');
      return true;
    } catch (e) {
      debugPrint('‚ùå Manual hotspot setup exception: $e');
      return false;
    }
  }

  /// Show hotspot setup instructions
  void _showHotspotInstructions(String ssid) {
    debugPrint('''
üì± EMERGENCY HOTSPOT SETUP REQUIRED:

1. Open Settings ‚Üí Network & Internet ‚Üí Hotspot & Tethering
2. Turn ON "Portable Wi-Fi hotspot"
3. Set Network Name (SSID) to: $ssid
4. Set Password to: $emergencyPassword
5. Tap "Turn on hotspot"

‚ö†Ô∏è This is critical for emergency communication!
''');
  }

  /// Verify hotspot is working
  Future<bool> _verifyHotspotWorking() async {
    try {
      // Try to bind to hotspot port
      final server = await ServerSocket.bind(InternetAddress.anyIPv4, tcpPort);
      await server.close();
      debugPrint('‚úÖ Hotspot verification successful');
      return true;
    } catch (e) {
      debugPrint('‚ùå Hotspot verification failed: $e');
      return false;
    }
  }

  /// Verify hotspot status periodically
  Future<void> _verifyHotspotStatus() async {
    if (_actualCreatedSSID == null || !emergencyMode) return;

    try {
      // Check if hotspot is still active
      final isActive = await _verifyHotspotWorking();
      if (!isActive) {
        debugPrint('‚ö†Ô∏è Hotspot appears inactive, attempting recovery...');
        _addMessageTrace('Hotspot recovery attempted');

        // Try to recreate hotspot
        await createEmergencyHotspot();
      }
    } catch (e) {
      debugPrint('‚ùå Hotspot status verification error: $e');
    }
  }

  @override
  Future<void> discoverDevices({bool force = false}) async {
    try {
      debugPrint('üîç Starting device discovery...');
      await _discoveryService.discoverDevices(force: force);
      debugPrint('‚úÖ Device discovery completed');
    } catch (e) {
      debugPrint('‚ùå Device discovery failed: $e');
    }
  }

  @override
  Future<void> sendMessage({
    required String message,
    required MessageType type,
    String? targetDeviceId,
    double? latitude,
    double? longitude,
    String? senderName,
    String? id,
    int? ttl,
    List<String>? routePath,
  }) async {
    try {
      _addMessageTrace('Sending message: $message (type: ${type.name})');

      // Use actual userName from service
      final actualSenderName = userName ?? senderName ?? 'Unknown User';

      debugPrint('üì§ Sending message: "$message" from: $actualSenderName');

      // Create message model
      final messageModel = targetDeviceId != null
          ? MessageModel.createDirectMessage(
              fromUser: actualSenderName,
              message: message,
              deviceId: deviceId!,
              targetDeviceId: targetDeviceId,
              type: type,
              isEmergency:
                  type == MessageType.emergency || type == MessageType.sos,
              latitude: latitude,
              longitude: longitude,
            )
          : MessageModel.createBroadcastMessage(
              fromUser: actualSenderName,
              message: message,
              deviceId: deviceId!,
              type: type,
              isEmergency:
                  type == MessageType.emergency || type == MessageType.sos,
              latitude: latitude,
              longitude: longitude,
            );

      // Save to database first
      await DatabaseService.insertMessage(messageModel);

      // Add to message history
      saveMessageToHistory(messageModel);

      // Send via network
      await _networkService.broadcastMessage(messageModel);

      // Update status to sent
      if (messageModel.messageId != null) {
        await DatabaseService.updateMessageStatus(
          messageModel.messageId!,
          MessageStatus.sent,
        );
      }

      _addMessageTrace('Message sent successfully: ${messageModel.messageId}');
      debugPrint('‚úÖ Message sent successfully');
    } catch (e) {
      _addMessageTrace('Message send failed: $e');
      debugPrint('‚ùå Message send failed: $e');
      rethrow;
    }
  }

  @override
  void _startEmergencyMode() {
    super._startEmergencyMode();

    // Start aggressive discovery in emergency mode
    Timer.periodic(Duration(seconds: 15), (_) {
      if (emergencyMode && connectedDevices.isEmpty) {
        discoverDevices(force: true);
      }
    });
  }

  /// Add message trace for debugging
  void _addMessageTrace(String trace) {
    final timestamp = DateTime.now().toIso8601String();
    _messageTrace.add('[$timestamp] $trace');

    // Keep only last 100 entries
    if (_messageTrace.length > 100) {
      _messageTrace.removeAt(0);
    }
  }

  /// Get message trace for debugging
  List<String> getMessageTrace() => List.from(_messageTrace);

  /// Get detailed service status
  String getDetailedStatus() {
    final networkStatus = _networkService.getNetworkStatus();
    final discoveryStatus = _discoveryService.getDiscoveryStatus();

    return '''
=== P2P Main Service Status ===
Device ID: $deviceId
User Name: $userName
Current Role: $currentRole
Emergency Mode: $emergencyMode
Connected Devices: ${connectedDevices.length}
Discovered Devices: ${discoveredResQLinkDevices.length}

Network Status:
- TCP Server: ${networkStatus['tcpServerActive']}
- HTTP Server: ${networkStatus['httpServerActive']}
- Connected Sockets: ${networkStatus['connectedSockets']}
- WebSocket Connections: ${networkStatus['webSocketConnections']}

Discovery Status:
- Discovery In Progress: ${discoveryStatus['discoveryInProgress']}
- WiFi Direct Available: ${discoveryStatus['wifiDirectAvailable']}
- Discovered Devices: ${discoveryStatus['discoveredDevices']}

Hotspot Status:
- Created SSID: $_actualCreatedSSID
- Creation In Progress: $_hotspotCreationInProgress

Recent Message Traces:
${_messageTrace.take(5).join('\n')}
''';
  }

  @override
  void dispose() {
    debugPrint('üóëÔ∏è P2P Main Service disposing...');

    _hotspotVerificationTimer?.cancel();

    _networkService.dispose();
    _discoveryService.dispose();

    _messageTrace.clear();

    super.dispose();
  }
}
